// ---------------------------------------------------------------
// shader.ca - 2024
// 
// This demonstrates the ability to write GPU shaders and kernels
// in the same source file. The kernel function is compiled to 
// SPIR-V bytecode and can be used as a first-class primitive.
// ---------------------------------------------------------------

// native definitions
struct Window;

fun createWindow(title: * byte, width: int, height: int): * Window;
// fun setupDemoPipeline(* Window, Kernel): unit;
fun update(* Window): unit;
fun closed(* Window): bool;
fun destroyWindow(* Window): unit;

fun main(): unit {
    let window: * Window = createWindow("Shader Demo", 800, 600);

    // setupDemoPipeline(window, fragmentShader); // pass in compiled kernel by value!

    // TODO: generate while loop and not expression
    while (!closed(window)) {
        update(window);
    }

    destroyWindow(window);
}

// ker fragmentShader(uv: vec2): vec4 {
//     return vec4(1.0, 0.0, 0.0, 1.0);
// }
